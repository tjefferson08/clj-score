(ns cljs-demo.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn stem [x-pos]
  [:line {:x1 x-pos :y1 "2" :x2 x-pos :y2 "74" :stroke "black"}])

(defn staff [width]
  [:<>
   [:line {:x1 "0" :y1 "2" :x2 width :y2 "2" :stroke "black"}]
   [:line {:x1 "0" :y1 "22" :x2 width :y2 "22" :stroke "black"}]
   [:line {:x1 "0" :y1 "42" :x2 width :y2 "42" :stroke "black"}]
   [:line {:x1 "0" :y1 "62" :x2 width :y2 "62" :stroke "black"}]
   [:line {:x1 "0" :y1 "82" :x2 width :y2 "82" :stroke "black"}]])

(defn note-head [x-pos y-pos] [:ellipse {:cx x-pos :cy y-pos :rx "15" :ry "10"}])

(defn play-note [frequency duration]
  (let [context (js/AudioContext.)
        oscillator (.createOscillator context)
        ]
    (set! (.. oscillator -frequency -value ) frequency)
    (.connect oscillator (.-destination context))
    (.start oscillator 0)
    (js/setTimeout (fn [] (.stop oscillator)) duration)))

;; TODO: style lines/ellipses
(defn note [x-pos]
  (let [width 50]
    [:<>
     [note-head x-pos 72]
     [stem (+ x-pos 15)]]))

(defn staff-builder []
  (reagent/with-let [notes (reagent/atom [])
                     handle-keys (fn [e]
                                   (if (= (.-key e) "a")
                                     (swap! notes (fn [curr] (conj curr "a")))
                                     (js/console.log "not an a")))
                     _ (js/document.addEventListener "keyup" handle-keys)]
    [:div
     [:svg {:viewBox "0 0 500 500" :xmlns "http://www.w3.org/2000/svg"}
      (map-indexed (fn [index a-note]
                     [:<>
                      ;; TODO: make this not overlay a buncha staffs
                      [staff (* index 50)]
                      [note (* index 50)]]) @notes)]]
    (finally
      (js/document.removeEventListener "keyup" handle-keys))))

(defn home-page []
  (fn []
    [:span.main
     [:h1 "This is neat"]
     [staff-builder]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of cljs-demo"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))

(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of cljs-demo"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))

(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of cljs-demo")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))

(defn about-page []
  (fn [] [:span.main
          [:h1 "About cljs-demo"]]))


;; -------------------------
;; Translate routes -> page components


(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component


(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About cljs-demo"]]]
       [page]
       [:footer
        [:p "cljs-demo was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
